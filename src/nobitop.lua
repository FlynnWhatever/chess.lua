--local bit
--if pcall(require, 'bit') then
--    bit = require 'bit'
--elseif pcall(require, 'bit32') then
--    bit = require 'bit32'
--else
--    bit = require((...):match('(.-)[^%/]+$') .. 'luabit')
--end
--
--local band = bit.band
--local bor = bit.bor
--local bxor = bit.bxor
--local rshift = bit.rshift
--local lshift = bit.lshift

local obj = {}
local buffer = { ['16&8'] = 0, ['20&2'] = 0, ['35>>4'] = 2, ['81&15'] = 1, ['71&15'] = 7, ['21&15'] = 5, ['114&136'] = 0, ['22&136'] = 0, ['32&136'] = 0, ['82&136'] = 0, ['1&16'] = 0, ['0&16'] = 0, ['72&136'] = 8, ['133&136'] = 128, ['32~32'] = 0, ['-33&136'] = 136, ['8&16'] = 0, ['32&10'] = 0, ['17&8'] = 0, ['36>>4'] = 2, ['84&15'] = 4, ['16>>4'] = 1, ['64&15'] = 0, ['33&136'] = 0, ['66>>4'] = 4, ['53&136'] = 0, ['73&136'] = 8, ['63&136'] = 8, ['96>>4'] = 6, ['86>>4'] = 5, ['20&4'] = 4, ['118&15'] = 6, ['0|32'] = 32, ['97&15'] = 1, ['87&15'] = 7, ['115&136'] = 0, ['67&15'] = 3, ['101&15'] = 5, ['116>>4'] = 7, ['17&15'] = 1, ['34&136'] = 0, ['54&136'] = 0, ['64&136'] = 0, ['37&15'] = 5, ['117&136'] = 0, ['17&4'] = 0, ['14&136'] = 8, ['64&10'] = 0, ['102&15'] = 6, ['95&136'] = 8, ['85&136'] = 0, ['105&136'] = 8, ['65&136'] = 0, ['55&136'] = 0, ['82&15'] = 2, ['80>>4'] = 5, ['70>>4'] = 4, ['32&15'] = 0, ['50>>4'] = 3, ['143&136'] = 136, ['56&4'] = 0, ['-14&136'] = 128, ['16&4'] = 0, ['25&136'] = 8, ['15&136'] = 8, ['119&15'] = 7, ['96&136'] = 0, ['65&15'] = 1, ['69>>4'] = 4, ['56&136'] = 8, ['49>>4'] = 3, ['19>>4'] = 1, ['46&136'] = 8, ['16&18'] = 16, ['35&15'] = 3, ['55&15'] = 7, ['103&15'] = 7, ['16&136'] = 0, ['146&136'] = 128, ['98>>4'] = 6, ['96~32'] = 64, ['87&136'] = 0, ['98&15'] = 2, ['68&15'] = 4, ['97&136'] = 0, ['47&136'] = 8, ['37&136'] = 0, ['67&136'] = 0, ['57&136'] = 8, ['18&15'] = 2, ['-27&136'] = 128, ['144&136'] = 128, ['48&15'] = 0, ['8&2'] = 0, ['127&136'] = 8, ['38&15'] = 6, ['1&2'] = 0, ['0&2'] = 0, ['113&15'] = 1, ['136&136'] = 136, ['17&136'] = 0, ['99>>4'] = 6, ['-7&136'] = 136, ['2>>4'] = 0, ['1>>4'] = 0, ['0>>4'] = 0, ['18&8'] = 0, ['38&136'] = 0, ['48&136'] = 0, ['23>>4'] = 1, ['33>>4'] = 2, ['134&136'] = 128, ['53>>4'] = 3, ['7>>4'] = 0, ['6>>4'] = 0, ['5>>4'] = 0, ['4>>4'] = 0, ['3>>4'] = 0, ['113&136'] = 0, ['1<<3'] = 8, ['8&8'] = 8, ['18&10'] = 2, ['53&4'] = 4, ['118&136'] = 0, ['7&15'] = 7, ['5&15'] = 5, ['6&15'] = 6, ['3&15'] = 3, ['4&15'] = 4, ['1&15'] = 1, ['2&15'] = 2, ['66&15'] = 2, ['69&136'] = 0, ['86&15'] = 6, ['49&136'] = 0, ['17&2'] = 0, ['96~64'] = 32, ['34>>4'] = 2, ['89&136'] = 8, ['54>>4'] = 3, ['1&8'] = 0, ['100&136'] = 0, ['64>>4'] = 4, ['36&15'] = 4, ['112&15'] = 0, ['103&136'] = 0, ['32&4'] = 0, ['64&64'] = 64, ['17&16'] = 16, ['1&64'] = 0, ['115&15'] = 3, ['-9&136'] = 128, ['2&64'] = 0, ['39&136'] = 0, ['4&64'] = 0, ['19&136'] = 0, ['49&15'] = 1, ['39&15'] = 7, ['69&15'] = 5, ['112>>4'] = 7, ['18&2'] = 2, ['19&15'] = 3, ['130&136'] = 128, ['56&16'] = 16, ['1|16'] = 17, ['16&64'] = 0, ['99&15'] = 3, ['64&96'] = 64, ['4&2'] = 0, ['64&8'] = 0, ['64&18'] = 0, ['32&18'] = 0, ['1&96'] = 0, ['4&18'] = 0, ['2&18'] = 2, ['17&64'] = 0, ['1&18'] = 0, ['64~64'] = 0, ['8&4'] = 0, ['1&4'] = 0, ['2&4'] = 0, ['-24&136'] = 136, ['4&4'] = 4, ['121&136'] = 8, ['-26&136'] = 128, ['102>>4'] = 6, ['0&4'] = 0, ['-12&136'] = 128, ['126&136'] = 8, ['145&136'] = 128, ['-18&136'] = 136, ['85&15'] = 5, ['8&64'] = 0, ['8&96'] = 0, ['64&32'] = 0, ['16&32'] = 0, ['8&32'] = 0, ['24&4'] = 0, ['-29&136'] = 128, ['30&136'] = 8, ['-2&136'] = 136, ['152&136'] = 136, ['-28&136'] = 128, ['84>>4'] = 5, ['150&136'] = 128, ['24&136'] = 8, ['128&136'] = 128, ['112&136'] = 0, ['18&64'] = 0, ['18&96'] = 0, ['18&32'] = 0, ['129&136'] = 128, ['18&4'] = 0, ['18&16'] = 16, ['2|16'] = 18, ['32&32'] = 32, ['111&136'] = 8, ['64&17'] = 0, ['87>>4'] = 5, ['17>>4'] = 1, ['32&17'] = 0, ['37>>4'] = 2, ['16&17'] = 16, ['64&16'] = 0, ['83>>4'] = 5, ['110&136'] = 8, ['2&17'] = 0, ['24&16'] = 16, ['-11&136'] = 128, ['98&136'] = 0, ['32&96'] = 32, ['-8&136'] = 136, ['32&8'] = 0, ['104&136'] = 8, ['120&136'] = 8, ['34&15'] = 2, ['32|64'] = 96, ['1<<2'] = 4, ['102&136'] = 0, ['17&10'] = 0, ['17&32'] = 0, ['135&136'] = 128, ['64&4'] = 0, ['119&136'] = 0, ['117>>4'] = 7, ['56&32'] = 32, ['68>>4'] = 4, ['78&136'] = 8, ['56&8'] = 8, ['20&32'] = 0, ['4&96'] = 0, ['18>>4'] = 1, ['48>>4'] = 3, ['38>>4'] = 2, ['53&16'] = 16, ['53&2'] = 0, ['56&2'] = 0, ['116&136'] = 0, ['32&64'] = 0, ['24&8'] = 8, ['1<<0'] = 1, ['149&136'] = 128, ['2&136'] = 0, ['1&136'] = 0, ['0&136'] = 0, ['96&64'] = 64, ['-30&136'] = 128, ['-13&136'] = 128, ['94&136'] = 8, ['64&2'] = 0, ['32&2'] = 0, ['9&136'] = 8, ['8&136'] = 8, ['7&136'] = 0, ['97>>4'] = 6, ['5&136'] = 0, ['4&136'] = 0, ['3&136'] = 0, ['119>>4'] = 7, ['21>>4'] = 1, ['53&1'] = 1, ['131&136'] = 128, ['62&136'] = 8, ['4&32'] = 0, ['2&96'] = 0, ['24&2'] = 0, ['2&2'] = 2, ['85>>4'] = 5, ['71>>4'] = 4, ['81>>4'] = 5, ['51>>4'] = 3, ['2&16'] = 0, ['2&8'] = 0, ['-31&136'] = 128, ['4&8'] = 0, ['64&1'] = 0, ['32&1'] = 0, ['16&1'] = 0, ['0&32'] = 0, ['4&1'] = 0, ['1<<4'] = 16, ['2&1'] = 0, ['1&1'] = 1, ['118>>4'] = 7, ['1&32'] = 0, ['2&32'] = 0, ['32&16'] = 0, ['-25&136'] = 128, ['-10&136'] = 128, ['-15&136'] = 128, ['22>>4'] = 1, ['56&1'] = 0, ['116&15'] = 4, ['22&15'] = 6, ['-17&136'] = 136, ['53&8'] = 0, ['8&1'] = 0, ['53&32'] = 32, ['4&16'] = 0, ['51&15'] = 3, ['82>>4'] = 5, ['117&15'] = 5, ['115>>4'] = 7, ['52>>4'] = 3, ['0&1'] = 0, ['32>>4'] = 2, ['100>>4'] = 6, ['65>>4'] = 4, ['52&136'] = 0, ['55>>4'] = 3, ['20&15'] = 4, ['2&10'] = 2, ['1&10'] = 0, ['70&136'] = 0, ['4&10'] = 0, ['70&15'] = 6, ['18&136'] = 0, ['50&15'] = 2, ['23&136'] = 0, ['100&15'] = 4, ['80&15'] = 0, ['8&10'] = 8, ['2|8'] = 10, ['8&17'] = 0, ['8&18'] = 0, ['24&1'] = 0, ['83&15'] = 3, ['54&15'] = 6, ['16&2'] = 0, ['53&15'] = 5, ['50&136'] = 0, ['33&15'] = 1, ['23&15'] = 7, ['80&136'] = 0, ['151&136'] = 128, ['20&136'] = 0, ['20&8'] = 0, ['40&136'] = 8, ['24&32'] = 0, ['83&136'] = 0, ['101>>4'] = 6, ['96&32'] = 32, ['86&136'] = 0, ['114>>4'] = 7, ['1<<1'] = 2, ['0&8'] = 0, ['39>>4'] = 2, ['17&96'] = 0, ['113>>4'] = 7, ['84&136'] = 0, ['67>>4'] = 4, ['147&136'] = 128, ['79&136'] = 8, ['20&16'] = 16, ['66&136'] = 0, ['20>>4'] = 1, ['0&64'] = 0, ['52&15'] = 4, ['35&136'] = 0, ['20&1'] = 0, ['-32&136'] = 128, ['-16&136'] = 128, ['51&136'] = 0, ['41&136'] = 8, ['31&136'] = 8, ['21&136'] = 0, ['88&136'] = 8, ['81&136'] = 0, ['71&136'] = 0, ['1<<5'] = 32, ['-1&136'] = 136, ['6&136'] = 0, ['36&136'] = 0, ['114&15'] = 2, ['148&136'] = 128, ['101&136'] = 0, ['68&136'] = 0, ['99&136'] = 0, ['1&17'] = 1, ['96&15'] = 0, ['132&136'] = 128, ['103>>4'] = 6, ['137&136'] = 136, ['4&17'] = 0, ['0&15'] = 0, ['16&15'] = 0 }

--local function put_to_buffer(str, a, b, op, value)
--buffer[str] = {
--    a = a,
--    b = b,
--    op = op,
--    value = value,
--    count = 1
--}
--buffer.total = buffer.total + 1
--    print(str, a, b, op, value)
--end

function obj.band(a, b)
    return buffer[a .. '&' .. b]
    --local str = a .. '&' .. b
    --local bf = buffer[str]
    --if bf then
    --return bf
    --    --bf.count = bf.count + 1
    --    --return bf.value
    --else
    --    local ret = band(a, b)
    --    put_to_buffer(str, a, b, 'and', ret)
    --    return ret
    --end
end

function obj.bor(a, b)
    return buffer[a .. '|' .. b]
    --local str = a .. '|' .. b
    --local bf = buffer[str]
    --if bf then
    --return bf
    --    --bf.count = bf.count + 1
    --    --return bf.value
    --else
    --    local ret = bor(a, b)
    --    put_to_buffer(str, a, b, 'or', ret)
    --    return ret
    --end
end

function obj.bxor(a, b)
    return buffer[a .. '~' .. b]
    --local str = a .. '~' .. b
    --local bf = buffer[str]
    --if bf then
    --return bf
    --    --bf.count = bf.count + 1
    --    --return bf.value
    --else
    --    local ret = bxor(a, b)
    --    put_to_buffer(str, a, b, 'xor', ret)
    --    return ret
    --end
end

function obj.rshift(a, b)
    return buffer[a .. '>>' .. b]
    --local str = a .. '>>' .. b
    --local bf = buffer[str]
    --if bf then
    --return bf
    --    --bf.count = bf.count + 1
    --    --return bf.value
    --else
    --    local ret = rshift(a, b)
    --    put_to_buffer(str, a, b, 'rshift', ret)
    --    return ret
    --end
end

function obj.lshift(a, b)
    return buffer[a .. '<<' .. b]
    --local str = a .. '<<' .. b
    --local bf = buffer[str]
    --if bf then
    --return bf
    --    --bf.count = bf.count + 1
    --    --return bf.value
    --else
    --    local ret = lshift(a, b)
    --    put_to_buffer(str, a, b, 'lshift', ret)
    --    return ret
    --end
end

--obj.buffer = buffer
return obj
